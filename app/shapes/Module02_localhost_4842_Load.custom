/**
 * Jupiter Bakakeu
 *
 *
 */
Module02_localhost_4842_Load = Module02_localhost_4842_Load.extend({

     init: function(attr, setter, getter){
         this._super(attr, setter, getter);

         this.attr({resizeable:false});
         this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());

         // get the skill description from the backend.
         this.decription = null;       
         
         var _this= this;
         this.currentTimer=0;
         this.state = 5; // STOPPED
         this.last_en_value = 0;
         this.err_msg = "";
         this.skill_current_state = "Ready";
    },
    
    calculate:function(){
        var self = this;
        // STATE MACHINE
        switch (this.state) {
          case 0: // STOPPED
            this.getOutputPort(0).setValue(false);
            this.layerAttr("Circle_en",{fill:"#f0f0f0"});
            this.layerAttr("Circle_done",{fill:"#f0f0f0"});
            this.currentTimer=0;
            this.layerAttr("led_power",{fill:"#FF3C00"});
            this.layerAttr("led_connected",{fill:"#f0f0f0"});
            this.layerAttr("circle",{fill:"#ffffff"});
            if(this.getInputPort(0).getValue()){
                this.state = 10;
            }
            break;
          case 10: // Get The skill description
            this.layerAttr("Circle_en",{fill:"#faa50a"});
            this.layerAttr("led_power",{fill:"#33DE09"});
            this.layerAttr("led_connected",{fill:"#FF3C00"});
            this.layerAttr("circle",{fill:"#f0f0f0"});
            skillproxy.getSkillDescription(this.NAME).then(function (desc) {
                if (desc.skill_descp){
                    self.decription = desc.skill_descp;
                }
                if(self.decription){
                  // Make transition
                  self.state = 11;
                }else{
                  // Make transition to err
                  self.state = 6;
                  self.err_msg = "Could not fetch the skill description";
                }
            });
            this.state = 100;                       
            break;
          case 100: // Wait for the callback
            this.currentTimer=0;
            break;
          case 11: // Connect to the skill
            skillproxy.connectSkill(self.decription.ip, self.decription.port).then(function (resp_con) {
                if(resp_con.err){
                  // Make transition to err
                  self.state = 6;
                  self.err_msg = "Error while connecting to the skill!";
                }else{
                  /*socket.on("opcua_serverstatus", msg =>{
                    console.log("####### Serverstatus");
                  });
                  socket.on("SkillStatesChanged", msg =>{
                    console.log("####### StatesChanged");
                  });*/
    
                  // Make transition
                  self.state = 12;
                }
            }); 
            self.state = 110;               
            break;
          case 110:
            this.currentTimer=0;
            break;
          case 12: // Call the skill
            this.layerAttr("Circle_en",{fill:"#faa50a"});
            this.layerAttr("led_power",{fill:"#33DE09"});
            this.layerAttr("led_connected",{fill:"#33DE09"});
            this.layerAttr("circle",{fill:"#f0f0f0"});
            skillproxy.startSkill(self.decription.ip, self.decription.port, self.decription.skill.name, []).then(function (resp_start) {
              if(resp_start.err){
                // Make transition to err
                self.state = 6;
                self.err_msg = "Error while starting the skill!";
              }else{
                // Make transition
                self.state = 2;
              }
            });

            this.state = 120;               
            break;
          // case 1: // Call skill start
          //   this.layerAttr("Circle_en",{fill:"#faa50a"});
          //   this.layerAttr("led_power",{fill:"#33DE09"});
          //   this.layerAttr("led_connected",{fill:"#f0f0f0"});
          //   this.layerAttr("circle",{fill:"#f0f0f0"});
          //   // TODO: Call Start method with the parameters
          //   this.currentTimer=0;
            
          //   // Make transition
          //   this.state = 2;
          //   break;
          case 120: // Wait for the callback
            this.currentTimer=0;
            break;
          case 2: // Wait for the  skill to be done
            if(self.skill_current_state === "MMM"){
              // Make transition
              this.state = 3;
            }
            // this.currentTimer = (this.currentTimer + 1)% 400;
            // if(this.currentTimer === 0){
            //     this.state = 3;
            // }
            break;
          case 3: // Call Get results
            this.currentTimer=0;
            this.layerAttr("Circle_done",{fill:"#faa50a"});
            this.getOutputPort(0).setValue(true);
            this.state = 4;
            break;
          case 4: // Set the outputs
            this.layerAttr("Circle_done",{fill:"#faa50a"});
            this.getOutputPort(0).setValue(true);
            
            this.layerAttr("led_power",{fill:"#FF3C00"});
            this.layerAttr("circle",{fill:"#ffffff"});
            if(! this.getInputPort(0).getValue()){
                this.state = 5;
            }
            break;
          case 5: // Reinitialize
            this.getOutputPort(0).setValue(false);
            this.layerAttr("Circle_en",{fill:"#f0f0f0"});
            this.layerAttr("Circle_done",{fill:"#f0f0f0"});
            this.currentTimer=0;
            this.layerAttr("led_power",{fill:"#FF3C00"});
            this.layerAttr("led_connected",{fill:"#f0f0f0"});
            this.layerAttr("circle",{fill:"#ffffff"});
            this.state = 0;
            break;
          case 6: // Error
            this.getOutputPort(0).setValue(false);
            this.layerAttr("Circle_en",{fill:"#f0f0f0"});
            this.layerAttr("Circle_done",{fill:"#f0f0f0"});
            this.currentTimer=0;
            this.layerAttr("led_power",{fill:"#FF3C00"});
            this.layerAttr("led_connected",{fill:"#FF3C00"});
        }
        this.last_en_value = this.getOutputPort(0).getValue();
    },
    
   /**
     *  Called if the simulation mode is starting
     **/
    onStart:function(){
        this.currentTimer=0;
        this.layerAttr("led_power",{fill:"#FF3C00"});
        this.layerAttr("led_connected",{fill:"#f0f0f0"});
        this.layerAttr("Circle_en",{fill:"#f0f0f0"});
        this.layerAttr("Circle_done",{fill:"#f0f0f0"});
        this.layerAttr("circle",{fill:"#ffffff"});
        this.state = 5; // STOPPED
        this.last_en_value = 0;
    },

    /**
     *  Called if the simulation mode is stopping
     **/
    onStop:function(){
        this.currentTimer=0;
        this.layerAttr("led_power",{fill:"#FF3C00"});
        this.layerAttr("led_connected",{fill:"#f0f0f0"});
        this.layerAttr("Circle_en",{fill:"#f0f0f0"});
        this.layerAttr("Circle_done",{fill:"#f0f0f0"});
        this.layerAttr("circle",{fill:"#ffffff"});
        this.state = 5; // STOPPED
        this.last_en_value = 0;

        /*socket.off("opcua_serverstatus", msg =>{
          console.log("####### Serverstatus");
        });
        socket.off("SkillStatesChanged", msg =>{
          console.log("####### StatesChanged");
        });*/
    },
    
    getRequiredHardware: function(){
      return {
        raspi: false,
        arduino: false
      }
    }
});