/**
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custome code and event handler here.
 *
 *
 */
localhost_4840_InsertSkill = localhost_4840_InsertSkill.extend({

   init: function(attr, setter, getter){
         this._super(attr, setter, getter);

         this.attr({resizeable:false});
         this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());
         
         var _this= this;
         this.c_started=false;
         this.currentTimer=0;
    },
    
    calculate:function(){
        if(this.getInputPort(0).getValue()){
            if(this.c_started===false){
                this.currentTimer = (this.currentTimer + 1)% 300;
                if(this.currentTimer === 0){
                    this.c_started=true;
                }
            }else{
                this.layerAttr("Circle_done",{fill:"#faa50a"});
                this.getOutputPort(0).setValue(true);
            }
            this.layerAttr("Circle_en",{fill:"#faa50a"});
        }
        else{
            this.layerAttr("Circle_en",{fill:"#f0f0f0"});
            this.layerAttr("Circle_done",{fill:"#f0f0f0"});
            this.getOutputPort(0).setValue(false);
            this.c_started=false;
            this.currentTimer=0;
        }
    },

    propagate: function(index, port){
        if(!port.getConnections().isEmpty()){
            var con = port.getConnections().first();
            var other = con.getSource()===port?con.getTarget():con.getSource()
            if(other instanceof draw2d.InputPort){
                
            }
            else {
                hardware.arduino.set(index,!!other.getValue())
            }
        }
    },
    
   /**
     *  Called if the simulation mode is starting
     **/
    onStart:function(){
        this.c_started=false;
        this.currentTimer=0;
    },

    /**
     *  Called if the simulation mode is stopping
     **/
    onStop:function(){
    },
    
    getRequiredHardware: function(){
      return {
        raspi: false,
        arduino: false
      }
    }
});